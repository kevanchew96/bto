var place = autocomplete.getPlace();
if (!place.geometry)
{
return;
}
var addressPretty = place.formatted_address;
var address = '';
if (place.address_components)
{
address = [
(place.address_components[0] && place.address_components[0].short_name || ''),
(place.address_components[1] && place.address_components[1].short_name || ''),
(place.address_components[2] && place.address_components[2].short_name || ''),
(place.address_components[3] && place.address_components[3].short_name || ''),
(place.address_components[4] && place.address_components[4].short_name || ''),
(place.address_components[5] && place.address_components[5].short_name || ''),
(place.address_components[6] && place.address_components[6].short_name || ''),
(place.address_components[7] && place.address_components[7].short_name || '')
].join(' ');
}
var address_number =''
address_number = [(place.address_components[0] && place.address_components[0].short_name || '')]
var coords = place.geometry.location;
//console.log(address);
Shiny.onInputChange('jsValue', address);
Shiny.onInputChange('jsValueAddressNumber', address_number);
Shiny.onInputChange('jsValuePretty', addressPretty);
Shiny.onInputChange('jsValueCoords', coords);
});
}
</script>
<script src='https://maps.googleapis.com/maps/api/js?key=", key,
"&libraries=places&callback=initAutocomplete' async defer></script>")
),
conditionalPanel(
condition = "output.parents_full_address",
actionButton(inputId = "FinderClear", label = "Clear Address(es)"))
),
mainPanel(
withSpinner(leafletOutput(outputId = "map")),
hr(),
fluidRow(column(7,
helpText("Click on housing locations to
populate table below with information on houses
in that block")
),
column(7,
helpText("Note that MOP houses will
only be on the resale market after certain number
of years, with about 60% estimated to be available"))
),
br(),
fluidRow(
withSpinner(dataTableOutput(outputId = "PropertyFinder")),
)
))),
# ----------------------------------
# tab panel 4
tabPanel("Financial Planning",
financePlan() #function to compare financial planning of two flats
)
))
###################################################################################################################################################################
############  SERVER STARTS HERE   ################################################################################################################################
server <- function(input, output,session){
output$ui <- renderUI({
if (is.null(input$marital_status))
return()
# Depending on input$marital_status, we'll generate a different
# UI component and send it to the client.
if (input$marital_status == "Single") {
fluidPage(
fluidRow(
column(width = 6,
radioButtons("FTST", "Are you a First-Timer Applicant?",
choices=c("Yes","No"))
),
column(width=6,
radioButtons("Nationality", "Nationality Type",choices=c("SC", "Others"))
),
fluidRow(
numericInput("NetIncome","Income",value="Enter your income")
)))} else {
fluidPage(
fluidRow(
helpText("*Note: FT = First Timer, ST = Second Timer"),
helpText("*Note: SC = Singapore Citizen, SPR = Singapore Permanent Resident, F = Foreigner"),
column(width = 6,
radioButtons("FTST", "Applicant Type",choices=c("FT,FT","FT,ST","Others"))
),
column(width=6,
radioButtons("Nationality", "Nationality Type",choices=c("SC,SC","SC,SPR","SC,F"))
)
),
fluidRow(
numericInput("NetIncome","Household Income",value="Enter your income")
)
)
}
})
output$showleaflet <- renderUI({
if (input$leaflet_type == "Average Price"){
fluidPage(
tabsetPanel(type = "tabs",
tabPanel("2-Room", leafletOutput("leaflet1")),
tabPanel("3-Room", leafletOutput("leaflet2")),
tabPanel("4-Room", leafletOutput("leaflet3")),
tabPanel("5-Room", leafletOutput("leaflet4")),
tabPanel("EC", leafletOutput("leaflet5")),
tabPanel("Multi-Generation", leafletOutput("leaflet6"))
)
)
} else if (input$leaflet_type == "Availability") {
fluidPage(
tabsetPanel(type = "tabs",
tabPanel("2-Room", leafletOutput("leaflet_avail_1")),
tabPanel("3-Room", leafletOutput("leaflet_avail_2")),
tabPanel("4-Room", leafletOutput("leaflet_avail_3")),
tabPanel("5-Room", leafletOutput("leaflet_avail_4")),
tabPanel("EC", leafletOutput("leaflet_avail_5")),
tabPanel("Multi-Generation", leafletOutput("leaflet_avail_6"))
)
)
}
})
output$leaflet1 <- renderLeaflet({
plot_polygon(final_out,"2-Room")
})
output$leaflet2 <- renderLeaflet({
plot_polygon(final_out,"3-Room")
})
output$leaflet3 <- renderLeaflet({
plot_polygon(final_out,"4-Room")
})
output$leaflet4 <- renderLeaflet({
plot_polygon(final_out,"5-Room")
})
output$leaflet5 <- renderLeaflet({
plot_polygon(final_out,"HDB Executive")
})
output$leaflet6 <- renderLeaflet({
plot_polygon(final_out,"Multi-Gen/Jumbo")
})
output$leaflet_avail_1 <- renderLeaflet ({
plot_polygon2(resale_avail,"2-Room")
})
output$leaflet_avail_2 <- renderLeaflet ({
plot_polygon2(resale_avail,"3-Room")
})
output$leaflet_avail_3 <- renderLeaflet ({
plot_polygon2(resale_avail,"4-Room")
})
output$leaflet_avail_4 <- renderLeaflet ({
plot_polygon2(resale_avail,"5-Room")
})
output$leaflet_avail_5 <- renderLeaflet ({
plot_polygon2(resale_avail,"HDB Executive")
})
output$leaflet_avail_6 <- renderLeaflet ({
plot_polygon2(resale_avail,"Multi-Gen/Jumbo")
})
observeEvent(input$bttn1, {
updateTabsetPanel(session, inputId = "navbar", selected = "housingview")
})
#Financial Planning Map
output$leaflet_parents <- renderLeaflet(
leaflet() %>%  setView(lat = 1.376875, lng = 103.822169,
zoom = 11) %>%
addTiles()
)
observe({ variable_1 <- geocode(paste("Singapore", as.character(input$parent_address)))
leafletProxy("leaflet_parents") %>%
addMarkers(data = variable_1, ~lng, ~lat)
}
)
#Grant Breakdown
output$price_grant_barchart_1 <- renderPlotly( {
cost_calculator(input$home_type_1,
find_price(input$home_type_1),
input$NetIncome,
input$flat_type_1,
measure_distance_from_p(input$parent_address, (find_lonlat(input$home_type_1))),
(input$with_parents == "Yes"),
(input$marital_status == "Married") ,
input$Nationality,
input$FTST)
}
)
output$price_grant_barchart_2 <-
renderPlotly( {
cost_calculator(input$home_type_2,
find_price(input$home_type_2),
input$NetIncome,
input$flat_type_2,
measure_distance_from_p(input$parent_address, (find_lonlat(input$home_type_2))),
(input$with_parents == "Yes"),
(input$marital_status == "Married") ,
input$Nationality,
input$FTST)
}
)
# Base map with layers
html_legend <- "<img src='https://cdn.pixabay.com/photo/2018/02/18/20/34/locomotive-3163448_1280.png'style='width:10px;height:10px;'>MRT<br/>
<img src='https://cdn.pixabay.com/photo/2014/12/22/00/07/tree-576847_1280.png'style='width:10px;height:10px;'>Park<br/>
<img src='https://cdn.pixabay.com/photo/2017/01/31/00/09/book-2022464_1280.png'style='width:10px;height:10px;'>School<br/>
<img src='https://cdn.pixabay.com/photo/2016/08/31/11/54/user-1633249_1280.png'style='width:10px;height:10px;'>Community Centre<br/>
<img src='https://cdn.pixabay.com/photo/2020/06/22/10/55/house-5328786_1280.png'style='width:10px;height:10px;'>BTO<br/>
<img src='https://cdn.pixabay.com/photo/2020/07/19/18/23/real-estate-5420920_1280.png'style='width:10px;height:10px;'>Resale<br/>
<img src='https://cdn.pixabay.com/photo/2013/07/12/12/56/home-146585_1280.png 'style='width:10px;height:10px;'>MOP Soon<br/>"
output$map <- renderLeaflet(
{
leaflet() %>%
addTiles() %>%
setView(lng = 103.803214, lat = 1.368063, zoom = 11) %>%
addMarkers(data=schools, ~lon, ~lat,popup= ~Schools, label = ~Schools,
icon=makeIcon("School.png",iconWidth = 12, iconHeight =12), group="Primary Schools") %>%
addMarkers(data=parks, popup = ~Description, label = ~Description,
icon=makeIcon("Tree.png",iconWidth = 12, iconHeight =12), group="Parks") %>%
addMarkers(data=ccs, popup = ~Description, label = ~Description,
icon=makeIcon("CCs.png",iconWidth = 12, iconHeight =12), group="Community Centres") %>%
addMarkers(data=mrt, popup = ~final, label = ~final,
icon=makeIcon("Train.png",iconWidth = 12, iconHeight =12), group="MRTs") %>%
addLayersControl(overlayGroups=c("Primary Schools","Parks","Community Centres","MRTs")) %>%
addControl(html=html_legend,position = "bottomright")
})
# Set view to area
observeEvent(input$AreaView,{
leafletProxy("map") #%>%
#setView()
})
# For predictive address
parents_address <- reactive({
if(!is.null(input$jsValueAddressNumber)){
if(length(grep(pattern = input$jsValueAddressNumber, x = input$jsValuePretty ))==0){
final_address<- c(input$jsValueAddressNumber, input$jsValuePretty)
} else{
final_address<- input$jsValuePretty
}
final_address
}
})
output$parents_full_address <- renderText({
if(!is.null(parents_address())){
parents_address()
}
})
# Parents' address plot
observe({
parents_address <- parents_address()
if(length(parents_address>0))
{
address <- google_geocode(address = parents_address)
coords <- geocode_coordinates(address)
leafletProxy("map") %>%
addCircles(data=coords,~lng,~lat,radius=2000,fillOpacity=0.1, layerId="x") %>%
addMarkers(data=coords,~lng,~lat,popup=parents_address, label="Your Parents' House",
icon=makeIcon("Parents' House.png",iconWidth=12, iconHeight=12),layerId="y")
}
else
{
leafletProxy("map")
}
})
# Parents' address clearer
observeEvent(input$FinderClear,{
if(input$FinderClear)
{
leafletProxy("map") %>%
removeShape("x") %>%
removeMarker("y")
}
})
# BTO reactive function
BTO <- reactive({
req(input$HousingType)
filter(bto, Type %in% input$HousingType)
})
observe({
if(nrow(BTO())==0)
{
leafletProxy("map") %>%
clearGroup("BTO")
}
else
{
leafletProxy("map") %>%
clearGroup("BTO") %>%
addMarkers(data=BTO(),~lon,~lat,popup = ~`Town/Estate`, group="BTO",
icon=makeIcon("BTO.png",iconWidth=30, iconHeight=30),layerId=~`Town/Estate`)
}
})
# Resale reactive function
Resale <- reactive({
req(input$HousingType)
req(input$RoomType)
filter(resale, Room %in% input$RoomType) %>%
filter(Type %in% input$HousingType)
})
observe({
if(nrow(Resale())==0)
{
leafletProxy("map") %>%
clearGroup("Resale")
}
else
{
leafletProxy("map") %>%
clearGroup("Resale") %>%
addMarkers(data=Resale(),~lon,~lat,group="Resale",
icon=makeIcon("Resale.png",iconWidth=30, iconHeight=30),layerId=~Address)
}
})
# MOP reactive function
MOP <- reactive({
req(input$HousingType)
filter(mop, Type %in% input$HousingType)
})
observe({
if(nrow(MOP())==0)
{
leafletProxy("map") %>%
clearGroup("MOP")
}
else
{
leafletProxy("map") %>%
clearGroup("MOP") %>%
addMarkers(data=MOP(),~lon,~lat,group="MOP",
icon=makeIcon("MOP.png",iconWidth=30, iconHeight=30),layerId=~`Project Name`)
}
})
# Datatables for the 3 types of properties
observe({
data <- input$map_marker_click
if (is.null(data) || is.null(data$id))
{
return()
}
else
{
output$PropertyFinder <- renderDataTable({
if (data$id %in% bto$`Town/Estate`)
{
return(
datatable(filter(BTO()[,1:8], `Town/Estate` == data$id))
)
}
else if (data$id %in% resale$Address)
{
return(
datatable(filter(Resale()[,1:7], Address == data$id))
)
}
else if (data$id %in% mop$`Project Name`)
{
return(
datatable(filter(MOP()[,1:13], `Project Name` == data$id))
)
}
})
}
})
}
shinyApp(ui=ui, server=server)
=======
runApp('app(edit this one).R')
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="black", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Average_Price),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Average_Price,labFormat = labelFormat(prefix = "$"))
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="black", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Average_Price),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Average_Price,labFormat = labelFormat(prefix = "$"))
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
getwd()
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
getwd()
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
resale_avail <- read.csv("Resale_Avail.csv")
View(resale_avail)
runApp('app(edit this one).R')
>>>>>>> Stashed changes
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
