df3$start_time_only_new <- chron(times=df3$start_time_only)
df3
install.packages("tibbletime")
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter(df3,
(hour(start_time_only_new) == 07 & minute(start_time_only_new) <= 30)
)
df3$start_time_only_new <- chron(times=df3$start_time_only)
df3$start_time_only_new <- as.POSIXct(df3$start_time_only_new)
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter(df3,
start_time_only_new < 8)
)
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter(df3,
start_time_only_new < 8)
df3
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter(df3,
start_time_only_new < 07:30:00)
df3
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter(df3, start_time_only_new <= 07:30:00)
filter(df3, start_time_only_new >= 06:30:00)
df3
View(df3)
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter.datetime(df3,time.beg=0730,time.end=0830)
install.packages("MetFns"
df3$start_time_only_new <- chron(times=df3$start_time_only)
install.packages("MetFns")
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter.datetime(df3,time.beg=0730,time.end=0830)
library(MetFns)
df3$start_time_only_new <- chron(times=df3$start_time_only)
filter.datetime(df3,time.beg=0730,time.end=0830)
df3$start_time_only_new <- chron(times=df3$start_time_only)
df3
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3,start_time_hour <8)
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, start_time_hour <8)
df3$start_time_only_new <- chron(times=df3$start_time_only)
df3
df4 <- filter(df3, start_time_hour <8)
df3$start_time_only_new <- chron(times=df3$start_time_only)
df3
df4 <- filter(df3, df3$start_time_hour <8)
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
df4
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
df4 %>% group_by(`start station id`) %>% group_by(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
df4
#df4 %>% group_by(`start station id`) %>% group_by(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
df4
df4 %>% group_by(`start station id`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
df4
df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = plot_data4$count )
library(ggmap)
library(tidyverse)
library(devtools)
library(raster)
library(rgdal)
library(XML)
library(leaflet)
library(ggplot2)
library(viridis)
library(scales)
library(ggrepel)
library(ggthemes)
library(plotly)
library(lubridate)
library(chron)
setwd("C:/Users/kohji/Dropbox/DBA3702/R test 2")
register_google(key = 'AIzaSyDO2qMJDoY1GhFf_yWOz1pyvvMIrE62dz8')
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = count )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
leaflet() %>% addTiles() %>% addProviderTiles(providers$OpenStreetMap, group = "osm_default") %>%addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = count )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = count )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
plot_data4
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = count )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
plot_data4
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = count )
bto_data69 <- read_csv("BTOPredict.csv")
bto_data69
#Simple Leaflet with markers
leaflet() %>% addTiles() %>% addCircleMarkers(data = bto_data69, lng = ~lon, lat = ~lat, radius = 4, popup = bto_data69$`Town/Estate` )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`))
plot_data4
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = plot_data4 )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`)) %>% arrange(desc(count))
plot_data4
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data4, lng = ~lon, lat = ~lat, radius = 4, popup = plot_data4 )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`)) %>% arrange(desc(count))
plot_data5 <- plot_data4[1:20, ]
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data5, lng = ~lon, lat = ~lat, radius = 4, popup =count  )
df3$start_time_only_new <- chron(times=df3$start_time_only)
df4 <- filter(df3, df3$start_time_hour <8)
df4 <- filter(df3, df3$start_time_hour >6)
plot_data4 <- df4 %>% group_by(`start station name`) %>% summarise(count= n(), lon = mean(`start station latitude`), lat = mean(`start station longitude`)) %>% arrange(desc(count))
plot_data5 <- plot_data4[1:20, ]
#leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data5, lng = ~lon, lat = ~lat, radius = 4, popup =count  )
leaflet() %>% addTiles() %>% addCircleMarkers(data = plot_data5, lng = ~lon, lat = ~lat, radius = 4, popup = plot_data5$count )
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 7)
#ggmap(MyMap) +
#  stat_density2d(data = s_rit, aes(x = lon, y = lat, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
#  scale_fill_viridis(option = 'inferno') + facet_wrap(~score_range)
ggmap(MyMap)
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 11)
#ggmap(MyMap) +
#  stat_density2d(data = s_rit, aes(x = lon, y = lat, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
#  scale_fill_viridis(option = 'inferno') + facet_wrap(~score_range)
ggmap(MyMap)
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 10)
#ggmap(MyMap) +
#  stat_density2d(data = s_rit, aes(x = lon, y = lat, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
#  scale_fill_viridis(option = 'inferno') + facet_wrap(~score_range)
ggmap(MyMap)
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 12)
#ggmap(MyMap) +
#  stat_density2d(data = s_rit, aes(x = lon, y = lat, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
#  scale_fill_viridis(option = 'inferno') + facet_wrap(~score_range)
ggmap(MyMap)
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 10)
#ggmap(MyMap) +
#  stat_density2d(data = s_rit, aes(x = lon, y = lat, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
#  scale_fill_viridis(option = 'inferno') + facet_wrap(~score_range)
ggmap(MyMap)
df3
#Start Station Plot
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 10)
ggmap(MyMap) +
stat_density2d(data = df3, aes(x = `start station longitude`, y = `start station latitude`, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
scale_fill_viridis(option = 'inferno')
#Start Station Plot
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 12)
ggmap(MyMap) +
stat_density2d(data = df3, aes(x = `start station longitude`, y = `start station latitude`, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
scale_fill_viridis(option = 'inferno')
#Start Station Plot
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 13)
ggmap(MyMap) +
stat_density2d(data = df3, aes(x = `start station longitude`, y = `start station latitude`, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
scale_fill_viridis(option = 'inferno')
#Start Station Plot
MyMap <- get_map(location = "New York City",
source = "google", maptype = "roadmap", crop = FALSE, zoom = 13)
ggmap(MyMap) +
stat_density2d(data = df3, aes(x = `end station longitude`, y = `end station latitude`, fill = ..density..), geom = 'tile', contour = F, alpha = .5) +
scale_fill_viridis(option = 'inferno')
df3
df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`))
freq_data <- df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`)) %>% arrange(desc(count))
freq_data_top10 <- freq_data[1:10,]
freq_data_top10
freq_data <- df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`)) %>% arrange(desc(count))
freq_data_top10 <- freq_data[1:10,]
freq_data_top10$rank <- NA
freq_data_top10$rank[order.count] <- 1:nrow(freq_data_top10)
freq_data <- df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`)) %>% arrange(desc(count))
freq_data_top10 <- freq_data[1:10,]
freq_data_top10$rank <- NA
freq_data_top10$rank[order.count] <- 1:nrow(freq_data_top10)
freq_data <- df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`)) %>% arrange(desc(count))
freq_data_top10 <- freq_data[1:10,]
freq_data_top10
freq_data <- df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`)) %>% arrange(desc(count))
freq_data_top10 <- freq_data[1:10,]
freq_data_top10$rank <- order(freq_data_top10$count)
freq_data_top10
freq_data <- df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`)) %>% arrange(desc(count))
freq_data_top10 <- freq_data[1:10,]
freq_data_top10$rank <- rank(freq_data_top10$count)
freq_data_top10
freq_data <- df3 %>% group_by(`start station name`, `end station name`) %>% summarise(count = n(), start_lon = mean(`start station latitude`), start_lat = mean(`start station longitude`), end_lon = mean(`end station latitude`), end_lat = mean(`end station longitude`)) %>% arrange(desc(count))
freq_data_top10 <- freq_data[1:10,]
freq_data_top10$rank <- order(-freq_data_top10$count)
freq_data_top10
df3
df3
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
p <- df3 %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=countries,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma) +
xlab("GDP Per Capita (Log10 scale)")
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
p <- df3 %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=countries,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma) +
xlab("GDP Per Capita (Log10 scale)")
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
p <- df3 %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df3,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma) +
xlab("GDP Per Capita (Log10 scale)")
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df3, 50000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df3,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma) +
xlab("GDP Per Capita (Log10 scale)")
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df3, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma) +
xlab("GDP Per Capita (Log10 scale)")
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df3, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
xlab("GDP Per Capita (Log10 scale)")
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
xlab("GDP Per Capita (Log10 scale)")
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma)
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9)
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma)
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 10000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma)
ggplotly(p)
#Q What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 5000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender, alpha = 0.5))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma)
ggplotly(p)
#Q1) What is the correlation between age of the rider and the duration of each trip, classified by gender
df_sample <- sample_n(df_dropped_extreme, 1000)
p <- df_sample %>%ggplot() + geom_point(aes(x=tripduration, y = age, color = gender, alpha = 0.8))  +  geom_smooth(data=df_sample,aes(x=tripduration,y=age),method = "lm",color='blue',level=0.9) +
scale_x_log10(labels = comma)
ggplotly(p)
#A1) There is a mild positive correlation between the age of the rider and the duration of the trip
#Q2) Which age group makes up the largest proportion of riders at night 7pm -10pm
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df3
#Q2) Which age group makes up the largest proportion of riders doing last mile rides from 8am-10am
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
ggplot(df3, aes(x= age_group, fill = is_last_mile )) + geom_bar(position = "fill")
#Q2) Which age group makes up the largest proportion of riders doing last mile rides from 8am-10am
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- filter(df3, !is.na(df3))
ggplot(df6, aes(x= age_group, fill = is_last_mile )) + geom_bar(position = "fill")
#Q2) Which age group makes up the largest proportion of riders doing last mile rides from 8am-10am
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- filter(df3, !is.na(df3$age_group))
ggplot(df6, aes(x= age_group, fill = is_last_mile )) + geom_bar(position = "fill")
#Q2) Which age group makes up the largest proportion of riders doing last mile rides from 8am-10am
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
ggplot(df6, aes(x= age_group, fill = is_last_mile )) + geom_bar(position = "fill")
#Q2) Which age group makes up the largest proportion of riders doing last mile rides from 8am-10am
#divide into age groups
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
#limit time
df6 <- filter(df6, df6$start_time_hour <= 10)
df6 <- filter(df6, df6$start_time_hour >=8)
ggplot(df6, aes(x= age_group, fill = is_last_mile )) + geom_bar(position = "fill")
#Q3) What is the proportion last mile rides from 8am-10am among the different age groups
#divide into age groups
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
#limit time
df6 <- filter(df6, df6$start_time_hour <= 10)
df6 <- filter(df6, df6$start_time_hour >=8)
ggplot(df6, aes(x= age_group, fill = is_last_mile )) + geom_bar(position = "fill")
#A3) The proportion is similar
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
df6
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
plot1<- ggplot(df6, aes(x="", y=value, fill=age_group))+
geom_bar(width = 1, stat = "identity")
plot1
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
plot_data9 <- df6 %>% group_by(age_group) %>% summarise(count = n())
plot1<- ggplot(plot_data9, aes(x="", y=count, fill=age_group))+
geom_bar(width = 1, stat = "identity")
plot1
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
df6 <- filter(df6, is_last_mile = T)
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
df6 <- filter(df6, is_last_mile == T)
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
df6 <- filter(df6, is_last_mile == T)
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
df6 <- filter(df6, df6%is_last_mile == T)
#Q2) which age group has a higher proportion of last mile riders
df3$age_group <-  cut(df3$age, breaks = c(0,15,30,45,60,Inf), labels = c("0-15 years", "15-30 years", "30-45 years", "45-60 years", ">=60 years"), right = FALSE)
df6 <- df3[!is.na(df3$age_group),]
plot_data9 <- df6 %>% group_by(age_group) %>% summarise(count = n())
plot1<- ggplot(plot_data9, aes(x="", y=count, fill=age_group))+
geom_bar(width = 1, stat = "identity")
plot1
#A) 30-45 is the predominant age group making last mile rides
library(shiny); runApp('~/GitHub/bto/app(JJ).R')
runApp('~/GitHub/bto/app(JJ).R')
runApp('~/GitHub/bto/app(JJ).R')
runApp('~/GitHub/bto/app(JJ).R')
library(shiny); runApp('~/GitHub/bto/app(edit this one).R')
runApp('~/GitHub/bto/app(edit this one).R')
runApp('~/GitHub/bto/app(edit this one).R')
runApp('~/GitHub/bto/app(edit this one).R')
runApp('~/GitHub/bto/app(edit this one).R')
runApp('~/GitHub/bto/app(edit this one).R')
runApp('~/GitHub/bto/app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp()
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
