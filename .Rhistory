`Launch Date`=`Launch.Date`,`Year Completed`=`Year.of.Completion`,
`Studio Units`=`No.of.Studio.units`,`2-Room Units`=`No.of.2.room.units`,
`3-Room Units`=`No.of.3.room.units`,`4-Room Units`=`No.of.4.room.units`,
`5-Room Units`=`No.of.5.room.units`, `3Gen Units`=`No.of.3.gen.units`,`Total Units`=`Total.no.of.units`,
`End of MOP`=`End_of_mop`) %>% subset(select=-c(idMOP))
mop <- mop[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16)] %>% select(-Type,Type)
library(tidyr)
library(dplyr)
bto <- read.csv("BTOPredict.csv")
bto[6,1] <- 6
bto[,5] <- NA
bto$X <- paste0("B",row_number(bto$X))
bto <- bto %>% rename(ID=X,`Month of Launch`=`Month.of.Launch`,`Town/Estate`=`Town.Estate`,
`Estimated Flats`=`Estimated.Flats`,`2-Room Flexi`=`X2.room.Flexi`,`3-Room`=`X3.room`,
`4-Room`=`X4.room`,`5-Room`=`X5.room`)
resale <- read.csv("Resale_coords.csv")
resale$X.1 <- paste0("R",resale$X.1)
resale <- resale %>% rename(ID=X.1) %>% subset(select = -c(X))
mop <- read.csv("MOP.csv")
mop$X <- paste0("M",mop$X)
mop <- mop %>% rename(ID=X,`Town/Name`=`Town.Name`,`Project Name`=`BTO.Project.Name`,
`Launch Date`=`Launch.Date`,`Year Completed`=`Year.of.Completion`,
`Studio Units`=`No.of.Studio.units`,`2-Room Units`=`No.of.2.room.units`,
`3-Room Units`=`No.of.3.room.units`,`4-Room Units`=`No.of.4.room.units`,
`5-Room Units`=`No.of.5.room.units`, `3Gen Units`=`No.of.3.gen.units`,`Total Units`=`Total.no.of.units`,
`End of MOP`=`End_of_mop`) %>% subset(select=-c(idMOP))
mop <- mop[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16)] %>% select(-Type,Type)
View(mop)
View(bto)
View(resale)
bto <- read.csv("BTOPredict.csv")
bto[6,1] <- 6
bto[,5] <- NA
bto$X <- paste0("B",row_number(bto$X))
View(bto)
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- resale[row_index, "Price"]
}else {
price <- 400000
}
}
find_price(R12)
find_price("R12")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- resale[row_index, "Price"]
}else {
price <- 400000
}
return(price)
}
find_price("R12")
find_price("M12")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- resale[row_index, "Price"]
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- 400000
}else{
price <- 400000
}
return(price)
}
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
family_grant <- function(income, flat_type, is_married, citizenship, application){
if(income <=14000 & citizenship == "SC,SC" & is_married == T & application == "FT,FT"){
f_grant <- ifelse((flat_type == "2 ROOM" | flat_type == "3 ROOM"| flat_type == "4 ROOM"), yes = 50000, no = 40000)
} else if (income <=14000 & citizenship == "SC,SPR" & is_married == T & application == "FT,FT") {
f_grant <- ifelse((flat_type == "2 ROOM" | flat_type == "3 ROOM"| flat_type == "4 ROOM"), yes = 40000, no = 30000)
} else{
f_grant <- 0
}
return(f_grant)
}
#resale_grant : singles grant
singles_grant <- function(income, flat_type, is_married, citizenship, application){
if(income <= 7000 & is_married == F & application == "FT" & citizenship == "SC" | is_married == T & income <=14000 & citizenship == "SC,F" & application == "FT,FT"){
s_grant <- ifelse((flat_type == "2 ROOM" | flat_type == "3 ROOM"| flat_type == "4 ROOM"), yes = 25000, no = 20000)
} else {
s_grant <- 0
}
return(s_grant)
}
#resale_grant : half-housing grant
half_housing_grant <- function(income, flat_type, is_married, citizenship, application){
if(income <= 14000 & is_married == T & citizenship != "SC,F" & application == "FT,ST") {
hh_grant <- ifelse((flat_type == "2 ROOM" | flat_type == "3 ROOM"| flat_type == "4 ROOM"), yes = 25000, no = 20000)
} else{
hh_grant <- 0
}
}
#resale_grant: Enhanced CPF Housing Grant (EHG)
enhanced_housing_grant <- function(income, is_married, citizenship, application){
eh_grant <- 0
if(is_married == T & citizenship == "SC,SC" & application == "FT,FT"){
if(income <= 1500 ){
eh_grant <- 80000
} else if(income <= 2000){
eh_grant <- 75000
} else if(income <= 2500){
eh_grant <- 70000
} else if(income <= 3000){
eh_grant <- 65000
} else if(income <= 3500){
eh_grant <- 60000
} else if(income <= 4000){
eh_grant <- 55000
} else if(income <= 4500){
eh_grant <- 50000
} else if(income <= 5000){
eh_grant <- 45000
} else if(income <= 5500){
eh_grant <- 40000
} else if(income <= 6000){
eh_grant <- 35000
} else if(income <= 6500){
eh_grant <- 30000
} else if(income <= 7000){
eh_grant <- 25000
} else if(income <= 7500){
eh_grant <- 20000
} else if(income <= 8000){
eh_grant <- 15000
} else if(income <= 8500){
eh_grant <- 10000
} else if(income <= 9000){
eh_grant <- 5000
} else {
eh_grant <- 0
}
}else{
eh_grant <- 0
}
return(eh_grant)
}
#resale_grant: Singles Enhanced CPF Housing Grant (EHG-SINGLES)
half_enhanced_housing_grant <- function(income, is_married, citizenship, application){
half_eh_grant <- 0
if((is_married == F  & citizenship == "SC") | (is_married == T & citizenship != "SC,SC") | (is_married == T & citizenship == "SC,SC" & application == "FT,ST" )){
if(income <= 750 ){
half_eh_grant <- 40000
} else if(income <= 1000){
half_eh_grant <- 37500
} else if(income <= 1250){
half_eh_grant <- 35000
} else if(income <= 1500){
half_eh_grant <- 32500
} else if(income <= 1750){
half_eh_grant <- 30000
} else if(income <= 2000){
half_eh_grant <- 27500
} else if(income <= 2250){
half_eh_grant <- 25000
} else if(income <= 2500){
half_eh_grant <- 22500
} else if(income <= 2750){
half_eh_grant <- 20000
} else if(income <= 3000){
half_eh_grant <- 17500
} else if(income <= 3250){
half_eh_grant <- 15000
} else if(income <= 3500){
half_eh_grant <- 10000
} else if(income <= 3750){
half_eh_grant <- 10000
} else if(income <= 4000){
half_eh_grant <- 7500
} else if(income <= 4250){
half_eh_grant <- 5000
} else if(income <= 4500){
half_eh_grant <- 2500
} else {
half_eh_grant <- 0
}
}else{
half_eh_grant <- 0
}
return(half_eh_grant)
}
#resale_grant: Proximity Housing Grant (PHG)
proximity_grant <- function(distance_from_p, with_parents, is_married, citizenship){
if(with_parents == T){
if (is_married == T & citizenship != "SC,F") {
p_grant <- 30000
} else if (is_married == F & citizenship == "SC"){
p_grant <- 15000
}else{
p_grant <- 0
}
} else if (with_parents == F){
if (distance_from_p < 4 & is_married == T & citizenship != "SC,F") {
p_grant <- 20000
} else if (distance_from_p < 4 & is_married == F & citizenship == "SC") {
p_grant <- 10000
} else{
p_grant <- 0
}
}
else{
p_grant <- 0
}
return(p_grant)
}
#downpayment function
downpayment <- function (base_price, income, is_married, citizenship) {
downpayment_amt <- 0
if (is_married == T & income <= 14000 ) {
downpayment_amt <- 0.1 * base_price
}
else if (is_married == F & income <= 7000){
downpayment_amt <- 0.1 * base_price
}
else {
downpayment_amt <- 0.2 * base_price
}
return (downpayment_amt)
}
#loantype function
loan_type <- function (base_price, income, is_married, citizenship) {
loan_type <- "NA"
if (is_married == T & income <= 14000 ) {
loan_type <- "HDB"
}
else if (is_married == F & income <= 7000){
loan_type <- "HDB"
}
else {
loan_type <- "Bank Loan"
}
return (loan_type)
}
#total resale grants function
resale_breakdown<- function(base_price, income, flat_type, distance_from_p, with_parents, is_married, citizenship, application){
f_grant <- family_grant(income, flat_type, is_married, citizenship, application)
s_grant <- singles_grant(income, flat_type, is_married, citizenship, application)
hh_grant <- half_housing_grant(income, flat_type, is_married, citizenship, application)
eh_grant <- enhanced_housing_grant(income, is_married, citizenship, application)
p_grant <- proximity_grant(distance_from_p, with_parents, is_married, citizenship)
single_eh_grant <- half_enhanced_housing_grant(income, is_married, citizenship, application)
total_grant <- f_grant + s_grant + hh_grant + eh_grant + p_grant + single_eh_grant
downpayment_amt <- downpayment(base_price, income, is_married, citizenship)
loan_type <- loan_type(base_price, income, is_married, citizenship)
sum_of_grant <- sum(c(f_grant, s_grant, hh_grant, eh_grant, single_eh_grant, p_grant))
balance <- base_price - sum_of_grant - downpayment_amt
cost_breakdown <- c(balance, downpayment_amt, f_grant, s_grant, hh_grant, eh_grant, single_eh_grant, p_grant)
df <- data.frame(matrix(ncol=3,nrow=8, dimnames=list(NULL, c("total_price", "type", "amount") )))
types <- c("Balance", "Downpayment" , "Family Grant", "Singles Grant", "Half housing Grant", "Enhanced Housing Grant", "Singles Enhanced Housing Grant", "Proximity Grant")
title <- c(rep(base_price, 8))
df[,1] <- title
df[,2] <- types
df[,3] <- cost_breakdown
breakdown_plot <- ggplot(df, aes(fill=type, y=amount, x=total_price)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = stat(y), group = total_price), stat = 'summary', fun=sum) +  #ADD THE TOTAL SUM ABOVE
ylab("Amount (SG$)") + xlab("") +
scale_fill_discrete(name = "Type") +
scale_y_continuous(label=comma)
breakdown <- ggplotly(breakdown_plot)
return(breakdown)
}
#Total BTO Breakdown
bto_breakdown<- function(base_price, income, is_married, citizenship, application){
eh_grant <- 0
single_eh_grant <- 0
if(is_married == T & citizenship == "SC,SC" & application == "FT,FT"){
eh_grant <- enhanced_housing_grant(income, is_married, citizenship)
}
else if (is_married == T & citizenship == "SC,SC" & application == "FT,ST"){
single_eh_grant <- half_enhanced_housing_grant((income/2), is_married, citizenship, application)
}
else if(is_married == T & citizenship == "SC,SPR"){
single_eh_grant <- half_enhanced_housing_grant((income/2), is_married, citizenship, application )
}
else if(is_married == F){
single_eh_grant <- half_enhanced_housing_grant(income, is_married, citizenship, application)
}
downpayment_amt <- downpayment(base_price, income, is_married, citizenship)
loan_type <- loan_type(base_price, income, is_married, citizenship)
sum_of_grant <- sum(c(eh_grant, single_eh_grant))
balance <- base_price - sum_of_grant - downpayment_amt
bto_cost_breakdown<- c(balance, downpayment_amt, eh_grant, single_eh_grant)
df <- data.frame(matrix(ncol=3,nrow=4, dimnames=list(NULL, c("total_price", "type", "amount") )))
types <- c("Balance", "Downpayment", "Enhanced Housing Grant", "Singles Enhanced Housing Grant")
title <- c(rep(base_price, 4))
df[,1] <- title
df[,2] <- types
df[,3] <- bto_cost_breakdown
breakdown_plot <- ggplot(df, aes(fill=type, y=amount, x=total_price)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = stat(y), group = total_price), stat = 'summary', fun=sum) +  #ADD THE TOTAL SUM ABOVE
ylab("Amount (SG$)") + xlab("") +
scale_fill_discrete(name = "Type") +
scale_y_continuous(label=comma)
breakdown <- ggplotly(breakdown_plot)
return(breakdown)
}
#use the relevant grant calculator
cost_calculator <- function (ID, base_price, income, flat_type, distance_from_p, with_parents, is_married, citizenship, application){
if((substring(ID, 1, 1)) == 'B'|(substring(ID, 1, 1)) == 'b'){
bto_breakdown (base_price, income, is_married, citizenship, application)
}else {
resale_breakdown(base_price, income, flat_type, distance_from_p, with_parents, is_married, citizenship, application)
}
}
cost_calculator("R12", 500000, 10000, "2-ROOM", 3, T,T,"SC,SC", "FT,FT")
cost_calculator("b12", 500000, 10000, "2-ROOM", 3, T,T,"SC,SC", "FT,FT")
cost_calculator("B12", 500000, 10000, "2-ROOM", 3, T,T,"SC,SC", "FT,FT")
bto_breakdown(500000, 5000, T, "F", "FT,FT")
cost_calculator("B12", 500000, 10000, "2-ROOM", 3, T,T,"SC,SC", "FT,FT")
cost_calculator("R12", 500000, 10000, "2-ROOM", 3, T,T,"SC,SC", "FT,FT")
bto_breakdown<- function(base_price, income, is_married, citizenship, application){
eh_grant <- 0
single_eh_grant <- 0
if(is_married == T & citizenship == "SC,SC" & application == "FT,FT"){
eh_grant <- enhanced_housing_grant(income, is_married, citizenship, application)
}
else if (is_married == T & citizenship == "SC,SC" & application == "FT,ST"){
single_eh_grant <- half_enhanced_housing_grant((income/2), is_married, citizenship, application)
}
else if(is_married == T & citizenship == "SC,SPR"){
single_eh_grant <- half_enhanced_housing_grant((income/2), is_married, citizenship, application )
}
else if(is_married == F){
single_eh_grant <- half_enhanced_housing_grant(income, is_married, citizenship, application)
}
downpayment_amt <- downpayment(base_price, income, is_married, citizenship)
loan_type <- loan_type(base_price, income, is_married, citizenship)
sum_of_grant <- sum(c(eh_grant, single_eh_grant))
balance <- base_price - sum_of_grant - downpayment_amt
bto_cost_breakdown<- c(balance, downpayment_amt, eh_grant, single_eh_grant)
df <- data.frame(matrix(ncol=3,nrow=4, dimnames=list(NULL, c("total_price", "type", "amount") )))
types <- c("Balance", "Downpayment", "Enhanced Housing Grant", "Singles Enhanced Housing Grant")
title <- c(rep(base_price, 4))
df[,1] <- title
df[,2] <- types
df[,3] <- bto_cost_breakdown
breakdown_plot <- ggplot(df, aes(fill=type, y=amount, x=total_price)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = stat(y), group = total_price), stat = 'summary', fun=sum) +  #ADD THE TOTAL SUM ABOVE
ylab("Amount (SG$)") + xlab("") +
scale_fill_discrete(name = "Type") +
scale_y_continuous(label=comma)
breakdown <- ggplotly(breakdown_plot)
return(breakdown)
}
cost_calculator("R12", 500000, 10000, "2-ROOM", 3, T,T,"SC,SC", "FT,FT")
cost_calculator("B6", 500000, 10000, "2-ROOM", 3, T,T,"SC,SC", "FT,FT")
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- as.numeric(resale[row_index, "Price"])
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- 400000
}else{
price <- 400000
}
return(price)
}
find_price("R12")
find_price("R12")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- resale[row_index, "Price"]
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- 400000
}else{
price <- 400000
}
return(price)
}
find_price("R12")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- resale[row_index, "Price"]
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- 400000
}else{
price <- 400000
}
return(as.numeric(price))
}
find_price("R12")
?as.numeric
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- resale[row_index, "Price"]
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- 400000
}else{
price <- 400000
}
return(price)
}
price <- find_price("R12")
str(price)
resale$Price <- (gsub(",", "", resale$Price))
resale$Price <- (gsub(c(",", "$"), "", resale$Price))
resale$Price <- (gsub("$", "", resale$Price))
resale$Price <- (gsub("$", "", resale$Price))
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- as.numeric(resale[row_index, "Price"])
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- 400000
}else{
price <- 400000
}
return(price)
}
find_price("R12")
resale <- read.csv("Resale_coords.csv")
resale$X.1 <- paste0("R",resale$X.1)
resale <- resale %>% rename(ID=X.1) %>% subset(select = -c(X))
resale$Price <- (gsub(",", "", resale$Price))
resale$Price <- (gsub("$", "", resale$Price))
resale$Price <- str_remove(resale$price, "[$,]")
resale <- read.csv("Resale_coords.csv")
resale$X.1 <- paste0("R",resale$X.1)
resale <- resale %>% rename(ID=X.1) %>% subset(select = -c(X))
resale$Price <- (gsub(",", "", resale$Price))
resale$Price <- (gsub("[\\$,]", "", resale$Price))
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- as.numeric(resale[row_index, "Price"])
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- 400000
}else{
price <- 400000
}
return(price)
}
find_price("R12")
find_price("m6")
find_price("b12")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- format(as.numeric(resale[row_index, "Price"]),scientific = F)
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- format(400000, scientific = F)
}else{
price <- format(400000, scientific = F)
}
return(price)
}
find_price("R12")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- as.numeric(format(resale[row_index, "Price"],scientific = F))
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- as.numeric(format(400000, scientific = F))
}else{
price <- as.numeric(format(400000, scientific = F))
}
return(price)
}
find_price("R12")
find_price("B6")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- as.numeric(format(resale[row_index, "Price"],scientific = F))
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- as.numeric(format(400000, scientific = F))
}else{
price <- as.numeric(format(400000, scientific = T))
}
return(price)
}
find_price("B6")
find_price <- function(ID){
ID_char <- as.character(ID)
if((substring(ID, 1, 1)) == 'R'|(substring(ID, 1, 1)) == 'r'){
row_index <- as.numeric(substring(ID, 2, 9))
price <- as.numeric(format(resale[row_index, "Price"],scientific = F))
}else if ((substring(ID, 1, 1)) == 'M'| (substring(ID, 1, 1)) == 'm'){
price <- as.numeric(format(400000, scientific = F))
}else{
price <- as.numeric(format(400000, scientific = F))
}
return(price)
}
find_price("B6")
runApp('app(edit this one).R')
