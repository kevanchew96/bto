library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
data <- read.csv("Resale_Avail")
getwd()
data <- read.csv("Resale_Avail.csv")
room_type <- "2-Room"
data1 <- data %>% filter(Room==room_type)
shapeData <- readOGR(dsn="C:\\Users\\jeanl\\Documents\\GitHub\\bto",layer="districts")
data_plot <- merge(shapeData,data1,by.x="PLN_AREA_N",by.y="Postal_District")
popup <- paste0("<b>","District: ","</b>",data_plot$PLN_AREA_N,"<br/>",
"<b>","General Location: ","</b>",data_plot$Gnrl_Lc,"<br/>",
"<b>", "Number Of Units Available: ", "</b>", data_plot$Availability)
pal <- colorNumeric( palette = "YlGn", domain = data_plot$Availability)
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 2, stroke = TRUE, color="white", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Availability),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Availability)
css_fix <- "div.info.legend.leaflet-control br {clear: both;}" # CSS to correct spacing
html_fix <- htmltools::tags$style(type = "text/css", css_fix)  # Convert CSS to HTML
m <- m %>% htmlwidgets::prependContent(html_fix)                   # Insert into leaflet HTML code
m
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
data1 <- data %>% filter(Room==room_type)
shapeData <- readOGR(dsn="C:\\Users\\jeanl\\Documents\\GitHub\\bto",layer="districts")
data_plot <- merge(shapeData,data1,by.x="PLN_AREA_N",by.y="Postal_District")
popup <- paste0("<b>","District: ","</b>",data_plot$PLN_AREA_N,"<br/>",
"<b>","General Location: ","</b>",data_plot$Gnrl_Lc,"<br/>",
"<b>", "Number Of Units Available: ", "</b>", data_plot$Availability)
pal <- colorNumeric( palette = "YlGn", domain = data_plot$Availability)
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 2, stroke = TRUE, color="white", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Availability),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Availability)
css_fix <- "div.info.legend.leaflet-control br {clear: both;}" # CSS to correct spacing
html_fix <- htmltools::tags$style(type = "text/css", css_fix)  # Convert CSS to HTML
m <- m %>% htmlwidgets::prependContent(html_fix)                   # Insert into leaflet HTML code
m
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
popup <- paste0("<b>","District: ","</b>",data_plot$PLN_AREA_N,"<br/>",
"<b>","General Location: ","</b>",data_plot$Gnrl_Lc,"<br/>",
"<b>", "Number Of Units Available: ", "</b>", data_plot$Availability)
pal <- colorNumeric( palette = "YlGn", domain = data_plot$Availability)
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="white", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Availability),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Availability)
css_fix <- "div.info.legend.leaflet-control br {clear: both;}" # CSS to correct spacing
html_fix <- htmltools::tags$style(type = "text/css", css_fix)  # Convert CSS to HTML
m <- m %>% htmlwidgets::prependContent(html_fix)                   # Insert into leaflet HTML code
m
room_type <- "4-Room"
popup <- paste0("<b>","District: ","</b>",data_plot$PLN_AREA_N,"<br/>",
"<b>","General Location: ","</b>",data_plot$Gnrl_Lc,"<br/>",
"<b>", "Number Of Units Available: ", "</b>", data_plot$Availability)
pal <- colorNumeric( palette = "YlGn", domain = data_plot$Availability)
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="white", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Availability),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Availability)
css_fix <- "div.info.legend.leaflet-control br {clear: both;}" # CSS to correct spacing
html_fix <- htmltools::tags$style(type = "text/css", css_fix)  # Convert CSS to HTML
m <- m %>% htmlwidgets::prependContent(html_fix)                   # Insert into leaflet HTML code
m
data1 <- data %>% filter(Room==room_type)
shapeData <- readOGR(dsn="C:\\Users\\jeanl\\Documents\\GitHub\\bto",layer="districts")
data_plot <- merge(shapeData,data1,by.x="PLN_AREA_N",by.y="Postal_District")
popup <- paste0("<b>","District: ","</b>",data_plot$PLN_AREA_N,"<br/>",
"<b>","General Location: ","</b>",data_plot$Gnrl_Lc,"<br/>",
"<b>", "Number Of Units Available: ", "</b>", data_plot$Availability)
pal <- colorNumeric( palette = "YlGn", domain = data_plot$Availability)
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="white", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Availability),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Availability)
css_fix <- "div.info.legend.leaflet-control br {clear: both;}" # CSS to correct spacing
html_fix <- htmltools::tags$style(type = "text/css", css_fix)  # Convert CSS to HTML
m <- m %>% htmlwidgets::prependContent(html_fix)                   # Insert into leaflet HTML code
m
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="black", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Availability),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Availability)
css_fix <- "div.info.legend.leaflet-control br {clear: both;}" # CSS to correct spacing
html_fix <- htmltools::tags$style(type = "text/css", css_fix)  # Convert CSS to HTML
m <- m %>% htmlwidgets::prependContent(html_fix)                   # Insert into leaflet HTML code
m
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="grey", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Availability),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Availability)
css_fix <- "div.info.legend.leaflet-control br {clear: both;}" # CSS to correct spacing
html_fix <- htmltools::tags$style(type = "text/css", css_fix)  # Convert CSS to HTML
m <- m %>% htmlwidgets::prependContent(html_fix)                   # Insert into leaflet HTML code
m
runApp('app(edit this one).R')
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="black", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Average_Price),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Average_Price,labFormat = labelFormat(prefix = "$"))
m <-leaflet(data = data_plot) %>% addTiles() %>% addPolygons(data=data_plot, weight = 1, stroke = TRUE, color="black", smoothFactor = 0.5, fillOpacity = 0.5, fillColor = ~pal(data_plot$Average_Price),
popup = popup, dashArray = "") %>% addLegend("bottomright", pal = pal, values = ~Average_Price,labFormat = labelFormat(prefix = "$"))
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
runApp('app(edit this one).R')
getwd()
library(shiny); runApp('app(edit this one).R')
runApp('app(edit this one).R')
library(shiny); runApp('app(edit this one).R')
